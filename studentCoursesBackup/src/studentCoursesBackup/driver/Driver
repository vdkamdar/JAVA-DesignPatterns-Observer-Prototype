package studentCoursesBackup.driver;

import studentCoursesBackup.util.FileProcessor;
import studentCoursesBackup.util.TreeBuilder;
import studentCoursesBackup.util.Results;
import studentCoursesBackup.myTree.Node;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.InputMismatchException;
import java.lang.NumberFormatException;

public class Driver{
    public static void main(String args[]) throws Exception{
	String inputFile = null;
	String outputFile1 = null;
	String outputFile2 = null;
	String outputFile3 = null;
	
	if(args.length == 4){
	    inputFile = args[0];
	    outputFile1 = args[1];
	    outputFile2 = args[2];
	    outputFile3 = args[3];
	}
	else{
	    throw new RuntimeException("Four arguments expected!");
	}
	
	FileProcessor fp = new FileProcessor(inputFile);

	String line = null;
	int key = 0;
	String[] str_array = new String[2];
	HashMap<Integer,ArrayList<String>> student_records = new HashMap<Integer,ArrayList<String>>();
	ArrayList<String> courses;
	
	TreeBuilder tree = new TreeBuilder();
	TreeBuilder backup_tree_1 = new TreeBuilder();
	TreeBuilder backup_tree_2 = new TreeBuilder();
	
	Results results = new Results(outputFile1);
	
	while((line = fp.readLine()) != null){    
	    try{	
		str_array = line.split(":");
		key = Integer.parseInt(str_array[0]);
		
		Node node_orig = new Node(key);
		Node backup_node_1 = node_orig.clone();
		Node backup_node_2 = node_orig.clone();

		node_orig.registerObserver(backup_node_1);
		node_orig.registerObserver(backup_node_2);
		
		if(student_records.containsKey(key)){
		    courses = student_records.get(key);
		    courses.add(str_array[1]);
		    student_records.put(key, courses);
		    tree.insert(node_orig, key, student_records);
		}
		else{
		    courses = new ArrayList<String>();
		    courses.add(str_array[1]);		
		    student_records.put(key, courses);
		    tree.insert(node_orig, key, student_records);
		}
	    }
	    
	    catch(NumberFormatException e){
		throw new RuntimeException("Only integer values accepted");
	    }
	}
	results.writeToFile(tree, tree.root, student_records);
    }
}