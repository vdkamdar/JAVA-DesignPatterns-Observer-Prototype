package studentCoursesBackup.util;

import studentCoursesBackup.myTree.Node;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;

public class TreeBuilder{
    public Node root;
    
    public TreeBuilder(){
	root = null;
    }
    
    public void insert(Node node_orig, int b_number, HashMap<Integer, ArrayList<String>> student_records){
	
	if(root == null){
	    root = node_orig;
	}
	else{
	    insertNode(root, b_number, student_records, node_orig);
	}
    }

    public void insertNode(Node node, int b_number, HashMap<Integer, ArrayList<String>> student_records, Node node_orig){

	int nodeBnumber = node.getBnumber();
	Node left = node.getLeft();
	Node right = node.getRight();
	ArrayList<String> courses = node.getCourses();
	
	if(b_number < nodeBnumber){
	    if(left == null){
		node.setLeft(node_orig);
		courses = student_records.get(b_number);
	    }
	    else{
		insertNode(left, b_number, student_records, node_orig);
	    }
	}
	else if(b_number > nodeBnumber){
	    if(right == null){
		node.setRight(node_orig);
		courses = student_records.get(b_number);
	    }
	    else{
		insertNode(right, b_number, student_records, node_orig);
	    }
	}
    }

    public Node searchNode(Node node, int b_number, Node status){
	status = null;
	int nodeBnumber = node.getBnumber();
	Node left = node.getLeft();
	Node right = node.getRight();
	
	if(nodeBnumber == b_number){
	    status = node;
	}
	else if(nodeBnumber > b_number){
	    if(left == null){
		status = null;
	    }
	    else{
		searchNode(left, b_number, status);
	    }
	}
	else{
	    if(right == null){
		status = null;
	    }
	    else{
		searchNode(right, b_number, status);		
	    }
	}
	return status;
    }

    public delete(Node node, int bNumber, String course){
	Node status = searchNode(this.root, bNumber, node);
	ArrayList<String> courses = status.getCourses();	
    }
    
    public void printNodes(Node current_node, ArrayList<String> outputFileResults, HashMap<Integer, ArrayList<String>> student_records){
	
	if(root == null){
	    return;
	}
	else if(current_node != null){
	    printNodes(current_node.getLeft(), outputFileResults, student_records);
	    
	    outputFileResults.add(Integer.toString(current_node.getBnumber())+":"+student_records.get(current_node.getBnumber()));
	    
	    printNodes(current_node.getRight(), outputFileResults, student_records); 
	}
    }
}